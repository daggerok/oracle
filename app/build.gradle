buildscript {
  ext {
    javaVersion = '1.8'
    vavrVersion = '0.9.2'
    kotlinVersion = '1.2.61'
    springBootVersion = '2.0.4.RELEASE'
  }
}

plugins {
  id 'idea'
  id 'java'
  id 'maven'
  id 'eclipse'
  id 'org.jetbrains.kotlin.jvm' version '1.2.61'
  id 'org.jetbrains.kotlin.plugin.noarg' version '1.2.61'
  id 'org.jetbrains.kotlin.plugin.spring' version '1.2.61'
  id 'org.jetbrains.kotlin.plugin.allopen' version '1.2.61'
  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.0.4.RELEASE'
  id 'com.avast.gradle.docker-compose' version '0.6.18'
}

version = '0.0.1'
group = 'daggerok'
sourceCompatibility = targetCompatibility = "$javaVersion"

compileKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ['-Xjsr305=strict']
    jvmTarget = "$javaVersion"
  }
}

compileTestKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ['-Xjsr305=strict']
    jvmTarget = "$javaVersion"
  }
}

allOpen {
  annotation('javax.persistence.Entity')
}

noArg {
  annotation('javax.persistence.Entity')
}

defaultTasks 'clean', 'build'

repositories {
  mavenLocal()
  mavenCentral()
  // local jar file solution
  flatDir { dirs '.m2/repository/com/oracle/11.2.0.3' }
  //// solution with non official nexus
  //maven { url 'https://code.lds.org/nexus/content/groups/main-repo' }
}

dependencies {

  // local jar file solution
  compile(name: 'ojdbc6-11.2.0.3')

  compileOnly('org.springframework.boot:spring-boot-configuration-processor')
  compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile('org.hibernate:hibernate-core')

  compile("io.vavr:vavr:$vavrVersion")
  compileOnly('org.projectlombok:lombok')

  compile('com.fasterxml.jackson.module:jackson-module-kotlin:2.9.6')
  compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
  }
}

bootJar {
  launchScript()
}

def profile = project.hasProperty('profile') ? "-${project.getProperty('profile')}" : ''

dockerCompose {
  useComposeFiles = [project.file("docker-compose${profile}.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = 'Local'
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

wrapper {
  gradleVersion = '4.10'
  distributionType = 'BIN'
}

test {
  systemProperties 'property': 'value'
}

idea {
  module {
    downloadSources = true
  }
}

eclipse {
  classpath {
    downloadSources = true
  }
}
